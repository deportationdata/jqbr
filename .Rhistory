output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
shiny::shinyApp(
ui = fluidPage(
fluidRow(
column(8,
offset = 2,
queryBuilderOutput("querybuilder",
width = 600,
height = 300)
)
),
fluidRow(
verbatimTextOutput("txtFilterList"),
verbatimTextOutput("fulllist"),
verbatimTextOutput("txtSQL"),
verbatimTextOutput("txtMongo")
)
),
server = function(input, output, session) {
output$querybuilder <- renderQueryBuilder({
queryBuilder(
filters = filt,
plugins = list("sortable" = NA,
"bt-tooltip-errors" = NA,
"bt-checkbox" = list("color" = "primary"),
'filter-description' = list("mode" = "bootbox"),
"unique-filter" = NA,
"invert" = NA,
"not-group" = NA),
display_errors = TRUE,
allow_empty = FALSE
)
})
output$txtFilterList <- renderPrint({
req(input$querybuilder_validate)
filterTable(
filters = input$querybuilder_out,
data = mtcars,
output = "text"
)
})
output$fulllist <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_out
})
output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
devtools::load_all(".")
shiny::shinyApp(
ui = fluidPage(
fluidRow(
column(8,
offset = 2,
queryBuilderOutput("querybuilder",
width = 600,
height = 300)
)
),
fluidRow(
verbatimTextOutput("txtFilterList"),
verbatimTextOutput("fulllist"),
verbatimTextOutput("txtSQL"),
verbatimTextOutput("txtMongo")
)
),
server = function(input, output, session) {
output$querybuilder <- renderQueryBuilder({
queryBuilder(
filters = filt,
plugins = list("sortable" = NA,
"bt-tooltip-errors" = NA,
"bt-checkbox" = list("color" = "primary"),
'filter-description' = list("mode" = "bootbox"),
"unique-filter" = NA,
"invert" = NA,
"not-group" = NA),
display_errors = TRUE,
allow_empty = FALSE
)
})
output$txtFilterList <- renderPrint({
req(input$querybuilder_validate)
filterTable(
filters = input$querybuilder_out,
data = mtcars,
output = "text"
)
})
output$fulllist <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_out
})
output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
devtools::load_all(".")
shiny::shinyApp(
ui = fluidPage(
fluidRow(
column(8,
offset = 2,
queryBuilderOutput("querybuilder",
width = 600,
height = 300)
)
),
fluidRow(
verbatimTextOutput("txtFilterList"),
verbatimTextOutput("fulllist"),
verbatimTextOutput("txtSQL"),
verbatimTextOutput("txtMongo")
)
),
server = function(input, output, session) {
output$querybuilder <- renderQueryBuilder({
queryBuilder(
filters = filt,
plugins = list("sortable" = NA,
"bt-tooltip-errors" = NA,
"bt-checkbox" = list("color" = "primary"),
'filter-description' = list("mode" = "bootbox"),
"unique-filter" = NA,
"invert" = NA,
"not-group" = NA),
display_errors = TRUE,
allow_empty = FALSE
)
})
output$txtFilterList <- renderPrint({
req(input$querybuilder_validate)
filterTable(
filters = input$querybuilder_out,
data = mtcars,
output = "text"
)
})
output$fulllist <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_out
})
output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
devtools::load_all(".")
shiny::shinyApp(
ui = fluidPage(
fluidRow(
column(8,
offset = 2,
queryBuilderOutput("querybuilder",
width = 600,
height = 300)
)
),
fluidRow(
verbatimTextOutput("txtFilterList"),
verbatimTextOutput("fulllist"),
verbatimTextOutput("txtSQL"),
verbatimTextOutput("txtMongo")
)
),
server = function(input, output, session) {
output$querybuilder <- renderQueryBuilder({
queryBuilder(
filters = filt,
plugins = list("sortable" = NA,
"bt-tooltip-errors" = NA,
"bt-checkbox" = list("color" = "primary"),
'filter-description' = list("mode" = "bootbox"),
"unique-filter" = NA,
"invert" = NA,
"not-group" = NA),
display_errors = TRUE,
allow_empty = FALSE
)
})
output$txtFilterList <- renderPrint({
req(input$querybuilder_validate)
filterTable(
filters = input$querybuilder_out,
data = mtcars,
output = "text"
)
})
output$fulllist <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_out
})
output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
shiny::shinyApp(
ui = fluidPage(
fluidRow(
column(8,
offset = 2,
queryBuilderOutput("querybuilder",
width = 600,
height = 300)
)
),
fluidRow(
verbatimTextOutput("txtFilterList"),
verbatimTextOutput("fulllist"),
verbatimTextOutput("txtSQL"),
verbatimTextOutput("txtMongo")
)
),
server = function(input, output, session) {
output$querybuilder <- renderQueryBuilder({
queryBuilder(
filters = filt,
plugins = list("sortable" = NA,
#"bt-tooltip-errors" = NA,
"bt-checkbox" = list("color" = "primary"),
'filter-description' = list("mode" = "bootbox"),
"unique-filter" = NA,
"invert" = NA,
"not-group" = NA),
display_errors = TRUE,
allow_empty = FALSE
)
})
output$txtFilterList <- renderPrint({
req(input$querybuilder_validate)
filterTable(
filters = input$querybuilder_out,
data = mtcars,
output = "text"
)
})
output$fulllist <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_out
})
output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
shinyApp(
ui = dashboardPage(
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = dashboardBody(
fluidRow(
column(8, queryBuilder_bs4Output("querybuilder",
width = 800,
height = 200))
),
verbatimTextOutput("txtFilterList"),
verbatimTextOutput("fulllist"),
verbatimTextOutput("txtSQL"),
verbatimTextOutput("txtMongo")
)
),
server = function(input, output) {
output$querybuilder <- renderqueryBuilder_bs4({
queryBuilder_bs4(
filters = filt,
plugins = list("sortable" = NA,
#"bt-tooltip-errors" = NA,
"bt-checkbox" = list("color" = "primary"),
'filter-description' = list("mode" = "bootbox"),
"unique-filter" = NA,
"invert" = NA,
"not-group" = NA),
display_errors = TRUE,
allow_empty = TRUE
)
})
output$txtFilterList <- renderPrint({
req(input$querybuilder_validate)
filterTable(
filters = input$querybuilder_out,
data = mtcars,
output = "text"
)
})
output$fulllist <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_out
})
output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
devtools::load_all(".")
shinyApp(
ui = dashboardPage(
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = dashboardBody(
fluidRow(
column(8, queryBuilder_bs4Output("querybuilder",
width = 800,
height = 200))
),
verbatimTextOutput("txtFilterList"),
verbatimTextOutput("fulllist"),
verbatimTextOutput("txtSQL"),
verbatimTextOutput("txtMongo")
)
),
server = function(input, output) {
output$querybuilder <- renderqueryBuilder_bs4({
queryBuilder_bs4(
filters = filt,
plugins = list("sortable" = NA,
#"bt-tooltip-errors" = NA,
"bt-checkbox" = list("color" = "primary"),
'filter-description' = list("mode" = "bootbox"),
"unique-filter" = NA,
"invert" = NA,
"not-group" = NA),
display_errors = TRUE,
allow_empty = TRUE
)
})
output$txtFilterList <- renderPrint({
req(input$querybuilder_validate)
filterTable(
filters = input$querybuilder_out,
data = mtcars,
output = "text"
)
})
output$fulllist <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_out
})
output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
shinyApp(
ui = dashboardPage(
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = dashboardBody(
fluidRow(
column(8, queryBuilder_bs4Output("querybuilder",
width = 800,
height = 200))
),
verbatimTextOutput("txtFilterList"),
verbatimTextOutput("fulllist"),
verbatimTextOutput("txtSQL"),
verbatimTextOutput("txtMongo")
)
),
server = function(input, output) {
output$querybuilder <- renderqueryBuilder_bs4({
queryBuilder_bs4(
filters = filt,
plugins = list("sortable" = NA,
"bt-tooltip-errors" = NA,
"bt-checkbox" = list("color" = "primary"),
'filter-description' = list("mode" = "bootbox"),
"unique-filter" = NA,
"invert" = NA,
"not-group" = NA),
display_errors = TRUE,
allow_empty = TRUE
)
})
output$txtFilterList <- renderPrint({
req(input$querybuilder_validate)
filterTable(
filters = input$querybuilder_out,
data = mtcars,
output = "text"
)
})
output$fulllist <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_out
})
output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
shiny::shinyApp(
ui = fluidPage(
fluidRow(
column(8,
offset = 2,
queryBuilderOutput("querybuilder",
width = 600,
height = 300)
)
),
fluidRow(
verbatimTextOutput("txtFilterList"),
verbatimTextOutput("fulllist"),
verbatimTextOutput("txtSQL"),
verbatimTextOutput("txtMongo")
)
),
server = function(input, output, session) {
output$querybuilder <- renderQueryBuilder({
queryBuilder(
filters = filt,
plugins = list("sortable" = NA,
"bt-tooltip-errors" = NA,
"bt-checkbox" = list("color" = "primary"),
'filter-description' = list("mode" = "bootbox"),
"unique-filter" = NA,
"invert" = NA,
"not-group" = NA),
display_errors = TRUE,
allow_empty = FALSE
)
})
output$txtFilterList <- renderPrint({
req(input$querybuilder_validate)
filterTable(
filters = input$querybuilder_out,
data = mtcars,
output = "text"
)
})
output$fulllist <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_out
})
output$txtSQL <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_sql
})
output$txtMongo <- renderPrint({
req(input$querybuilder_validate)
input$querybuilder_mongo
})
}
)
usethis::use_pkgdown()
pkgdown::build_site()
install.packages("dbplyr")
options('repos')
options('repos')
install.packages("dbplyr")
install.packages(c("brms", "broom.helpers", "car", "DALEX", "dendroTools", "devtools", "effectsize", "forecast", "ggraph", "gtsummary", "keras", "labelled", "leaflet", "oce", "parameters", "pbkrtest", "qwraps2", "ragg", "rio", "rstatix", "scholar", "see", "sjmisc", "stacks", "tarchetypes", "textshaping", "tidymodels", "tidyquant", "tidyverse", "timetk", "tune", "tweenr", "viridis", "visR", "websocket", "workflows", "xaringan", "xaringanthemer"))
pkgdown::build_site()
library(dplyr)
library(readr)
data <- read_csv("https://raw.githubusercontent.com/hfshr/frontiers-paper/master/data/full_data_processed.csv") %>%
filter(time == 1) %>% # Get baseline measurements + prospective injury events
distinct(id, .keep_all = TRUE) %>% # Only 1 injury per person (some people reported more injuries)
select(id, time, pic, nle, tle, ple, fffs, bis, bas, injured)
View(data)
